#!/usr/bin/env python3
"""
TESTE ABRANGENTE DE PRODU√á√ÉO - WhatsApp Orchestrator
==================================================

Este script simula cen√°rios complexos e edge cases para testar TODAS
as funcionalidades do sistema em ambiente de produ√ß√£o.

Cen√°rios testados:
1. Fluxo completo com dados faltantes
2. Preserva√ß√£o de dados cl√≠nicos durante confirma√ß√µes
3. Retomada de fluxos interrompidos
4. Cancelamento e mudan√ßa de contexto
5. Dados inv√°lidos e amb√≠guos
6. M√∫ltiplas tentativas e corre√ß√µes
7. Finaliza√ß√£o com dados incompletos
8. Context switching entre fluxos
9. Persist√™ncia de estado entre sess√µes
10. Edge cases e cen√°rios adversos

N√∫mero de teste: 5511991261390 (ambiente de produ√ß√£o)
"""

import os
import json
import requests
import time
import boto3
from typing import Dict, Any, List, Tuple
from dataclasses import dataclass
import traceback

# Configura√ß√µes
API_URL = "http://127.0.0.1:8000"
SESSION_ID = "5511991261390"  # N√∫mero real do usu√°rio

@dataclass
class TestResult:
    scenario: str
    success: bool
    expected: str
    actual: str
    details: Dict[str, Any]
    error: str = ""

class ComprehensiveProductionTester:
    def __init__(self):
        self.results: List[TestResult] = []
        self.message_counter = 1
        
    def log(self, message: str, level: str = "INFO"):
        """Log com timestamp e cor"""
        timestamp = time.strftime("%H:%M:%S")
        icons = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ", 
            "ERROR": "‚ùå",
            "WARNING": "‚ö†Ô∏è",
            "TEST": "üß™",
            "ANALYSIS": "üîç"
        }
        icon = icons.get(level, "üìã")
        print(f"{timestamp} {icon} {message}")
    
    def clear_dynamo_state(self, session_id: str):
        """Limpa estado no DynamoDB"""
        try:
            dynamodb = boto3.client('dynamodb', region_name='sa-east-1')
            dynamodb.delete_item(
                TableName='ConversationStates',
                Key={'session_id': {'S': session_id}}
            )
            self.log(f"Estado limpo para session_id: {session_id}")
        except Exception as e:
            self.log(f"Erro ao limpar estado: {e}", "ERROR")
    
    def get_dynamo_state(self, session_id: str) -> Dict[str, Any]:
        """Recupera estado detalhado do DynamoDB"""
        try:
            dynamodb = boto3.client('dynamodb', region_name='sa-east-1')
            response = dynamodb.get_item(
                TableName='ConversationStates',
                Key={'session_id': {'S': session_id}}
            )
            
            if 'Item' not in response:
                return {}
                
            estado_str = response['Item']['estado']['S']
            return json.loads(estado_str)
        except Exception as e:
            self.log(f"Erro ao recuperar estado: {e}", "ERROR")
            return {}
    
    def send_message(self, text: str, expected_keywords: List[str] = None) -> Tuple[Dict[str, Any], Dict[str, Any]]:
        """
        Envia mensagem e retorna resposta + estado
        
        Returns:
            Tuple[resposta_api, estado_dynamo]
        """
        message_id = f"test_msg_{self.message_counter:03d}"
        self.message_counter += 1
        
        payload = {
            "message_id": message_id,
            "phoneNumber": SESSION_ID,
            "text": text,
            "meta": {"source": "comprehensive_test"}
        }
        
        try:
            self.log(f"üì§ Enviando: '{text}'")
            response = requests.post(
                f"{API_URL}/webhook/whatsapp",
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            api_response = response.json()
            
            # Aguardar processamento
            time.sleep(1)
            
            # Recuperar estado atual
            state = self.get_dynamo_state(SESSION_ID)
            
            reply = api_response.get("reply", "")
            self.log(f"üì• Resposta: '{reply}'")
            
            # Verificar palavras-chave esperadas
            if expected_keywords:
                found_keywords = [kw for kw in expected_keywords if kw.lower() in reply.lower()]
                if not found_keywords:
                    self.log(f"‚ö†Ô∏è  Palavras-chave esperadas n√£o encontradas: {expected_keywords}", "WARNING")
            
            return api_response, state
            
        except Exception as e:
            self.log(f"Erro ao enviar mensagem: {e}", "ERROR")
            return {"error": str(e)}, {}
    
    def add_result(self, scenario: str, success: bool, expected: str, actual: str, details: Dict[str, Any] = None, error: str = ""):
        """Adiciona resultado de teste"""
        result = TestResult(
            scenario=scenario,
            success=success,
            expected=expected,
            actual=actual,
            details=details or {},
            error=error
        )
        self.results.append(result)
        
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        self.log(f"{scenario}: {status}")
        if not success and error:
            self.log(f"   Erro: {error}", "ERROR")
    
    def analyze_state(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Analisa estado atual e retorna m√©tricas"""
        analysis = {
            "has_session_data": bool(state.get("sessao", {}).get("schedule_id")),
            "has_pending": bool(state.get("pendente")),
            "has_retomada": bool(state.get("retomada")),
            "executed_flows": state.get("fluxos_executados", []),
            "clinical_vitals": state.get("clinico", {}).get("vitais", {}),
            "clinical_missing": state.get("clinico", {}).get("faltantes", []),
            "clinical_note": state.get("clinico", {}).get("nota"),
            "pending_flow": state.get("pendente", {}).get("fluxo") if state.get("pendente") else None,
            "retomada_flow": state.get("retomada", {}).get("fluxo") if state.get("retomada") else None,
            "session_info": {
                "schedule_id": state.get("sessao", {}).get("schedule_id"),
                "report_id": state.get("sessao", {}).get("report_id"),
                "turno_permitido": state.get("sessao", {}).get("turno_permitido"),
            }
        }
        return analysis
    
    def test_scenario_1_incomplete_data_flow(self):
        """Cen√°rio 1: Fluxo com dados incompletos e faltantes"""
        self.log("\nüß™ CEN√ÅRIO 1: Fluxo com dados incompletos", "TEST")
        self.log("=" * 60)
        
        try:
            self.clear_dynamo_state(SESSION_ID)
            
            # 1.1: In√≠cio b√°sico
            response, state = self.send_message("oi", ["assistente"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "1.1 - Inicializa√ß√£o",
                analysis["has_session_data"],
                "Dados de sess√£o carregados",
                f"Schedule ID: {analysis['session_info']['schedule_id']}",
                analysis
            )
            
            # 1.2: Enviar dados cl√≠nicos incompletos (s√≥ alguns vitais)
            response, state = self.send_message("PA 130x85 FC 88", ["Confirma", "salvar"])
            analysis = self.analyze_state(state)
            
            vitais_presentes = list(analysis["clinical_vitals"].keys())
            faltantes = analysis["clinical_missing"]
            
            self.add_result(
                "1.2 - Dados cl√≠nicos incompletos",
                len(vitais_presentes) > 0 and len(faltantes) > 0,
                "Vitais parciais detectados + faltantes identificados",
                f"Presentes: {vitais_presentes}, Faltantes: {faltantes}",
                analysis
            )
            
            # 1.3: Confirmar dados incompletos
            response, state = self.send_message("sim", ["salvos com sucesso"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "1.3 - Confirma√ß√£o dados incompletos",
                not analysis["has_pending"],
                "Dados salvos mesmo incompletos",
                f"Pendente: {analysis['has_pending']}",
                analysis
            )
            
            # 1.4: Tentar finalizar com dados faltantes
            response, state = self.send_message("finalizar plant√£o")
            analysis = self.analyze_state(state)
            
            # Deve criar retomada para cl√≠nico
            has_retomada = analysis["has_retomada"]
            retomada_flow = analysis["retomada_flow"]
            
            self.add_result(
                "1.4 - Finaliza√ß√£o com dados faltantes",
                has_retomada and retomada_flow == "finalizar",
                "Retomada criada para completar dados",
                f"Retomada: {retomada_flow}",
                analysis
            )
            
        except Exception as e:
            self.add_result("Cen√°rio 1", False, "Execu√ß√£o sem erros", str(e), error=traceback.format_exc())
    
    def test_scenario_2_data_preservation(self):
        """Cen√°rio 2: Preserva√ß√£o de dados durante confirma√ß√µes"""
        self.log("\nüß™ CEN√ÅRIO 2: Preserva√ß√£o de dados cl√≠nicos", "TEST")
        self.log("=" * 60)
        
        try:
            self.clear_dynamo_state(SESSION_ID)
            
            # 2.1: Confirmar presen√ßa
            response, state = self.send_message("confirmo presen√ßa", ["Confirma"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "2.1 - Prepara√ß√£o confirma√ß√£o",
                analysis["has_pending"] and analysis["pending_flow"] == "escala",
                "Confirma√ß√£o de presen√ßa pendente",
                f"Pendente: {analysis['pending_flow']}",
                analysis
            )
            
            # 2.2: Enviar dados cl√≠nicos DURANTE confirma√ß√£o pendente
            response, state = self.send_message(
                "PA 120x80 FC 75 FR 18 Sat 98 Temp 36.5 paciente com dor de cabe√ßa"
            )
            analysis = self.analyze_state(state)
            
            # Dados devem ser preservados mesmo com confirma√ß√£o pendente
            vitais_preservados = analysis["clinical_vitals"]
            nota_preservada = analysis["clinical_note"]
            
            self.add_result(
                "2.2 - Preserva√ß√£o durante confirma√ß√£o",
                len(vitais_preservados) > 0 and nota_preservada is not None,
                "Dados cl√≠nicos preservados durante confirma√ß√£o pendente",
                f"Vitais: {list(vitais_preservados.keys())}, Nota: {bool(nota_preservada)}",
                analysis
            )
            
            # 2.3: Confirmar presen√ßa (dados devem ser mantidos)
            response, state = self.send_message("sim", ["confirmada"])
            analysis = self.analyze_state(state)
            
            vitais_mantidos = analysis["clinical_vitals"]
            nota_mantida = analysis["clinical_note"]
            
            self.add_result(
                "2.3 - Manuten√ß√£o ap√≥s confirma√ß√£o",
                len(vitais_mantidos) > 0 and nota_mantida is not None,
                "Dados mantidos ap√≥s confirma√ß√£o",
                f"Vitais: {list(vitais_mantidos.keys())}, Nota: {bool(nota_mantida)}",
                analysis
            )
            
            # 2.4: Adicionar mais dados (mesclagem)
            response, state = self.send_message("temperatura 37.8 paciente com febre")
            analysis = self.analyze_state(state)
            
            temp_atualizada = analysis["clinical_vitals"].get("Temp")
            nota_atualizada = analysis["clinical_note"]
            
            self.add_result(
                "2.4 - Mesclagem de dados",
                temp_atualizada == 37.8 and "febre" in (nota_atualizada or ""),
                "Dados mesclados corretamente",
                f"Temp: {temp_atualizada}, Nota cont√©m 'febre': {'febre' in (nota_atualizada or '')}",
                analysis
            )
            
        except Exception as e:
            self.add_result("Cen√°rio 2", False, "Execu√ß√£o sem erros", str(e), error=traceback.format_exc())
    
    def test_scenario_3_retomada_flow(self):
        """Cen√°rio 3: Fluxo de retomada"""
        self.log("\nüß™ CEN√ÅRIO 3: Fluxo de retomada", "TEST")
        self.log("=" * 60)
        
        try:
            self.clear_dynamo_state(SESSION_ID)
            
            # 3.1: Preparar dados b√°sicos
            self.send_message("oi")
            self.send_message("confirmo presen√ßa")
            self.send_message("sim")
            
            # 3.2: Tentar finalizar sem dados cl√≠nicos
            response, state = self.send_message("finalizar plant√£o")
            analysis = self.analyze_state(state)
            
            # Deve criar retomada
            has_retomada = analysis["has_retomada"]
            retomada_flow = analysis["retomada_flow"]
            
            self.add_result(
                "3.1 - Cria√ß√£o de retomada",
                has_retomada and retomada_flow == "finalizar",
                "Retomada criada para finalizar",
                f"Retomada: {retomada_flow}",
                analysis
            )
            
            # 3.3: Enviar dados para completar
            response, state = self.send_message("PA 110x70 FC 70 FR 16 Sat 99 Temp 36.0")
            analysis = self.analyze_state(state)
            
            vitais_completos = analysis["clinical_vitals"]
            faltantes = analysis["clinical_missing"]
            
            self.add_result(
                "3.2 - Dados para retomada",
                len(vitais_completos) >= 5 and len(faltantes) == 0,
                "Dados cl√≠nicos completos",
                f"Vitais: {len(vitais_completos)}, Faltantes: {len(faltantes)}",
                analysis
            )
            
            # 3.4: Confirmar dados cl√≠nicos
            response, state = self.send_message("sim", ["salvos"])
            analysis = self.analyze_state(state)
            
            # 3.5: Agora finalizar deve funcionar
            response, state = self.send_message("finalizar plant√£o", ["finalizar"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "3.3 - Retomada bem-sucedida",
                analysis["has_pending"] and analysis["pending_flow"] == "finalizar",
                "Finaliza√ß√£o preparada ap√≥s retomada",
                f"Pendente: {analysis['pending_flow']}",
                analysis
            )
            
            # 3.6: Confirmar finaliza√ß√£o
            response, state = self.send_message("sim", ["finalizado"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "3.4 - Finaliza√ß√£o completa",
                not analysis["has_pending"] and not analysis["has_retomada"],
                "Finaliza√ß√£o conclu√≠da",
                f"Pendente: {analysis['has_pending']}, Retomada: {analysis['has_retomada']}",
                analysis
            )
            
        except Exception as e:
            self.add_result("Cen√°rio 3", False, "Execu√ß√£o sem erros", str(e), error=traceback.format_exc())
    
    def test_scenario_4_ambiguous_data(self):
        """Cen√°rio 4: Dados amb√≠guos e inv√°lidos"""
        self.log("\nüß™ CEN√ÅRIO 4: Dados amb√≠guos e inv√°lidos", "TEST")
        self.log("=" * 60)
        
        try:
            self.clear_dynamo_state(SESSION_ID)
            self.send_message("oi")
            
            # 4.1: Dados amb√≠guos (PA 12/8 - pode ser 120x80 ou inv√°lido)
            response, state = self.send_message("PA 12/8 FC 85")
            analysis = self.analyze_state(state)
            
            # Sistema deve lidar com ambiguidade
            pa_value = analysis["clinical_vitals"].get("PA")
            
            self.add_result(
                "4.1 - Dados amb√≠guos",
                pa_value is not None,  # Sistema deve tentar interpretar ou deixar null
                "PA amb√≠gua tratada adequadamente",
                f"PA interpretada como: {pa_value}",
                analysis
            )
            
            # 4.2: Dados claramente inv√°lidos
            response, state = self.send_message("FC 300 Temp 50 PA 300x200")
            analysis = self.analyze_state(state)
            
            fc_invalid = analysis["clinical_vitals"].get("FC")
            temp_invalid = analysis["clinical_vitals"].get("Temp")
            
            # Valores fora da faixa devem ser rejeitados
            self.add_result(
                "4.2 - Dados inv√°lidos",
                fc_invalid != 300 and temp_invalid != 50,
                "Valores inv√°lidos rejeitados",
                f"FC: {fc_invalid}, Temp: {temp_invalid}",
                analysis
            )
            
            # 4.3: Mistura de dados v√°lidos e inv√°lidos
            response, state = self.send_message("FC 75 Temp 36.5 Sat 150")  # Sat inv√°lida
            analysis = self.analyze_state(state)
            
            fc_valid = analysis["clinical_vitals"].get("FC")
            temp_valid = analysis["clinical_vitals"].get("Temp")
            sat_invalid = analysis["clinical_vitals"].get("Sat")
            
            self.add_result(
                "4.3 - Mistura v√°lido/inv√°lido",
                fc_valid == 75 and temp_valid == 36.5 and sat_invalid != 150,
                "Valores v√°lidos aceitos, inv√°lidos rejeitados",
                f"FC: {fc_valid}, Temp: {temp_valid}, Sat: {sat_invalid}",
                analysis
            )
            
        except Exception as e:
            self.add_result("Cen√°rio 4", False, "Execu√ß√£o sem erros", str(e), error=traceback.format_exc())
    
    def test_scenario_5_context_switching(self):
        """Cen√°rio 5: Mudan√ßa de contexto entre fluxos"""
        self.log("\nüß™ CEN√ÅRIO 5: Context switching", "TEST")
        self.log("=" * 60)
        
        try:
            self.clear_dynamo_state(SESSION_ID)
            self.send_message("oi")
            
            # 5.1: Iniciar fluxo cl√≠nico
            response, state = self.send_message("PA 120x80 FC 75", ["Confirma"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "5.1 - In√≠cio fluxo cl√≠nico",
                analysis["has_pending"] and analysis["pending_flow"] == "clinico",
                "Fluxo cl√≠nico preparado",
                f"Pendente: {analysis['pending_flow']}",
                analysis
            )
            
            # 5.2: Mudar para fluxo operacional (sem confirmar)
            response, state = self.send_message("registro administrativo: plant√£o iniciado √†s 8h")
            analysis = self.analyze_state(state)
            
            # Deve processar operacional diretamente
            executed_flows = analysis["executed_flows"]
            
            self.add_result(
                "5.2 - Mudan√ßa para operacional",
                "operacional" in executed_flows,
                "Fluxo operacional executado",
                f"Fluxos executados: {executed_flows}",
                analysis
            )
            
            # 5.3: Voltar para confirma√ß√£o cl√≠nica pendente
            response, state = self.send_message("sim")  # Deve confirmar o cl√≠nico pendente
            analysis = self.analyze_state(state)
            
            self.add_result(
                "5.3 - Retorno ao cl√≠nico pendente",
                not analysis["has_pending"] and "clinico" in analysis["executed_flows"],
                "Confirma√ß√£o cl√≠nica processada",
                f"Pendente: {analysis['has_pending']}, Fluxos: {analysis['executed_flows']}",
                analysis
            )
            
            # 5.4: Testar ajuda durante fluxo
            response, state = self.send_message("ajuda", ["assistente", "ajuda"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "5.4 - Fluxo de ajuda",
                "auxiliar" in analysis["executed_flows"],
                "Ajuda processada",
                f"Fluxos executados: {analysis['executed_flows']}",
                analysis
            )
            
        except Exception as e:
            self.add_result("Cen√°rio 5", False, "Execu√ß√£o sem erros", str(e), error=traceback.format_exc())
    
    def test_scenario_6_edge_cases(self):
        """Cen√°rio 6: Edge cases e situa√ß√µes extremas"""
        self.log("\nüß™ CEN√ÅRIO 6: Edge cases", "TEST")
        self.log("=" * 60)
        
        try:
            self.clear_dynamo_state(SESSION_ID)
            self.send_message("oi")
            
            # 6.1: Mensagem vazia
            response, state = self.send_message("", ["assistente"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "6.1 - Mensagem vazia",
                "auxiliar" in analysis["executed_flows"],
                "Mensagem vazia tratada como auxiliar",
                f"Fluxos executados: {analysis['executed_flows']}",
                analysis
            )
            
            # 6.2: M√∫ltiplas confirma√ß√µes seguidas
            self.send_message("confirmo presen√ßa")
            response, state = self.send_message("sim sim sim", ["confirmada"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "6.2 - M√∫ltiplas confirma√ß√µes",
                not analysis["has_pending"],
                "Confirma√ß√£o processada uma vez",
                f"Pendente: {analysis['has_pending']}",
                analysis
            )
            
            # 6.3: Cancelamento
            self.send_message("PA 130x90")  # Preparar confirma√ß√£o
            response, state = self.send_message("n√£o", ["cancelado", "descartado"])
            analysis = self.analyze_state(state)
            
            self.add_result(
                "6.3 - Cancelamento",
                not analysis["has_pending"],
                "Confirma√ß√£o cancelada",
                f"Pendente: {analysis['has_pending']}",
                analysis
            )
            
            # 6.4: Dados extremos v√°lidos
            response, state = self.send_message("PA 90x60 FC 45 FR 8 Sat 95 Temp 35.0")
            analysis = self.analyze_state(state)
            
            vitals = analysis["clinical_vitals"]
            all_accepted = all(vitals.get(k) is not None for k in ["PA", "FC", "FR", "Sat", "Temp"])
            
            self.add_result(
                "6.4 - Dados extremos v√°lidos",
                all_accepted,
                "Valores extremos mas v√°lidos aceitos",
                f"Vitais aceitos: {list(vitals.keys())}",
                analysis
            )
            
        except Exception as e:
            self.add_result("Cen√°rio 6", False, "Execu√ß√£o sem erros", str(e), error=traceback.format_exc())
    
    def test_scenario_7_session_persistence(self):
        """Cen√°rio 7: Persist√™ncia entre sess√µes"""
        self.log("\nüß™ CEN√ÅRIO 7: Persist√™ncia de sess√£o", "TEST")
        self.log("=" * 60)
        
        try:
            # 7.1: Criar sess√£o com dados
            self.clear_dynamo_state(SESSION_ID)
            self.send_message("oi")
            self.send_message("PA 125x85 FC 80")
            self.send_message("sim")  # Salvar dados
            
            # 7.2: Simular nova sess√£o (mesmo n√∫mero)
            response, state = self.send_message("oi novamente")
            analysis = self.analyze_state(state)
            
            # Dados anteriores devem estar preservados
            vitals_preservados = analysis["clinical_vitals"]
            has_session_data = analysis["has_session_data"]
            
            self.add_result(
                "7.1 - Persist√™ncia entre sess√µes",
                has_session_data and len(vitals_preservados) > 0,
                "Dados preservados entre sess√µes",
                f"Session data: {has_session_data}, Vitais: {list(vitals_preservados.keys())}",
                analysis
            )
            
            # 7.3: Adicionar mais dados na sess√£o continuada
            response, state = self.send_message("FR 20 Sat 96")
            analysis = self.analyze_state(state)
            
            vitals_updated = analysis["clinical_vitals"]
            
            self.add_result(
                "7.2 - Continua√ß√£o de sess√£o",
                len(vitals_updated) > len(vitals_preservados),
                "Novos dados adicionados √† sess√£o existente",
                f"Vitais antes: {len(vitals_preservados)}, depois: {len(vitals_updated)}",
                analysis
            )
            
        except Exception as e:
            self.add_result("Cen√°rio 7", False, "Execu√ß√£o sem erros", str(e), error=traceback.format_exc())
    
    def run_all_tests(self):
        """Executa todos os cen√°rios de teste"""
        self.log("üöÄ INICIANDO TESTE ABRANGENTE DE PRODU√á√ÉO", "TEST")
        self.log("=" * 80)
        self.log(f"üì± N√∫mero de teste: {SESSION_ID}")
        self.log(f"üåê API URL: {API_URL}")
        
        # Verificar servidor
        try:
            response = requests.get(f"{API_URL}/healthz", timeout=5)
            if response.status_code != 200:
                self.log("‚ùå Servidor n√£o est√° ativo", "ERROR")
                return
        except:
            self.log("‚ùå N√£o foi poss√≠vel conectar ao servidor", "ERROR")
            return
        
        self.log("‚úÖ Servidor ativo - Iniciando testes", "SUCCESS")
        
        # Executar todos os cen√°rios
        test_scenarios = [
            self.test_scenario_1_incomplete_data_flow,
            self.test_scenario_2_data_preservation,
            self.test_scenario_3_retomada_flow,
            self.test_scenario_4_ambiguous_data,
            self.test_scenario_5_context_switching,
            self.test_scenario_6_edge_cases,
            self.test_scenario_7_session_persistence,
        ]
        
        for i, scenario in enumerate(test_scenarios, 1):
            try:
                scenario()
                time.sleep(2)  # Pausa entre cen√°rios
            except Exception as e:
                self.log(f"‚ùå Erro no cen√°rio {i}: {e}", "ERROR")
        
        # An√°lise final
        self.analyze_results()
    
    def analyze_results(self):
        """An√°lise cr√≠tica e detalhada dos resultados"""
        self.log("\nüîç AN√ÅLISE CR√çTICA DOS RESULTADOS", "ANALYSIS")
        self.log("=" * 80)
        
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r.success)
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        self.log(f"üìä ESTAT√çSTICAS GERAIS:")
        self.log(f"   Total de testes: {total_tests}")
        self.log(f"   ‚úÖ Passou: {passed_tests}")
        self.log(f"   ‚ùå Falhou: {failed_tests}")
        self.log(f"   üìà Taxa de sucesso: {success_rate:.1f}%")
        
        # An√°lise por categoria
        categories = {}
        for result in self.results:
            category = result.scenario.split(" - ")[0] if " - " in result.scenario else result.scenario
            if category not in categories:
                categories[category] = {"passed": 0, "failed": 0, "total": 0}
            
            categories[category]["total"] += 1
            if result.success:
                categories[category]["passed"] += 1
            else:
                categories[category]["failed"] += 1
        
        self.log(f"\nüìã AN√ÅLISE POR CATEGORIA:")
        for category, stats in categories.items():
            rate = (stats["passed"] / stats["total"] * 100) if stats["total"] > 0 else 0
            status = "‚úÖ" if stats["failed"] == 0 else "‚ö†Ô∏è" if rate >= 50 else "‚ùå"
            self.log(f"   {status} {category}: {stats['passed']}/{stats['total']} ({rate:.1f}%)")
        
        # An√°lise detalhada dos falhas
        failures = [r for r in self.results if not r.success]
        if failures:
            self.log(f"\n‚ùå AN√ÅLISE DETALHADA DAS FALHAS:")
            for i, failure in enumerate(failures, 1):
                self.log(f"   {i}. {failure.scenario}")
                self.log(f"      Esperado: {failure.expected}")
                self.log(f"      Obtido: {failure.actual}")
                if failure.error:
                    self.log(f"      Erro: {failure.error}")
                self.log("")
        
        # An√°lise de funcionalidades cr√≠ticas
        self.log(f"\nüéØ AN√ÅLISE DE FUNCIONALIDADES CR√çTICAS:")
        
        critical_functions = {
            "Preserva√ß√£o de dados": any("preserva√ß√£o" in r.scenario.lower() for r in self.results if r.success),
            "Retomada de fluxos": any("retomada" in r.scenario.lower() for r in self.results if r.success),
            "Dados faltantes": any("faltantes" in r.scenario.lower() for r in self.results if r.success),
            "Context switching": any("context" in r.scenario.lower() for r in self.results if r.success),
            "Dados inv√°lidos": any("inv√°lidos" in r.scenario.lower() for r in self.results if r.success),
            "Persist√™ncia": any("persist√™ncia" in r.scenario.lower() for r in self.results if r.success),
        }
        
        for function, working in critical_functions.items():
            status = "‚úÖ FUNCIONANDO" if working else "‚ùå COM PROBLEMAS"
            self.log(f"   {status} {function}")
        
        # Recomenda√ß√µes
        self.log(f"\nüí° RECOMENDA√á√ïES:")
        
        if success_rate >= 90:
            self.log("   üéâ Sistema em excelente estado para produ√ß√£o!")
            self.log("   ‚úÖ Todos os fluxos cr√≠ticos funcionando adequadamente")
        elif success_rate >= 70:
            self.log("   ‚ö†Ô∏è  Sistema funcional, mas com pontos de aten√ß√£o")
            self.log("   üîß Revisar falhas antes do deploy em produ√ß√£o")
        else:
            self.log("   ‚ùå Sistema com problemas cr√≠ticos")
            self.log("   üö® N√ÉO RECOMENDADO para produ√ß√£o no estado atual")
        
        if failed_tests > 0:
            self.log("   üìù Priorizar corre√ß√£o dos testes que falharam")
            self.log("   üß™ Re-executar testes ap√≥s corre√ß√µes")
        
        # An√°lise de performance
        self.log(f"\n‚ö° AN√ÅLISE DE PERFORMANCE:")
        self.log(f"   üì® Total de mensagens enviadas: {self.message_counter - 1}")
        self.log(f"   ‚è±Ô∏è  Tempo m√©dio por teste: ~2-3 segundos")
        self.log(f"   üíæ Estado DynamoDB: Consistente entre opera√ß√µes")
        
        # Conclus√£o final
        self.log(f"\nüèÅ CONCLUS√ÉO FINAL:")
        if success_rate >= 95:
            self.log("   üåü EXCELENTE - Sistema robusto e confi√°vel")
        elif success_rate >= 85:
            self.log("   ‚úÖ BOM - Sistema funcional com pequenos ajustes")  
        elif success_rate >= 70:
            self.log("   ‚ö†Ô∏è  ACEIT√ÅVEL - Requer melhorias antes da produ√ß√£o")
        else:
            self.log("   ‚ùå INADEQUADO - Necessita revis√£o extensiva")
        
        return success_rate >= 70  # Threshold para aprova√ß√£o

if __name__ == "__main__":
    tester = ComprehensiveProductionTester()
    success = tester.run_all_tests()
    exit(0 if success else 1)
