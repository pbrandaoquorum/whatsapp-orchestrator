"""
Fiscal LLM - Gera√ß√£o de Respostas Din√¢micas
==========================================

O Fiscal √© respons√°vel por:
1. Ler o estado can√¥nico do DynamoDB
2. Gerar respostas contextuais via LLM
3. Nunca usar respostas est√°ticas

Sempre usa temperature=0 para determinismo.
"""

import os
import json
from typing import Dict, Any
from openai import OpenAI
import structlog

logger = structlog.get_logger()

class FiscalLLM:
    """Gerador de respostas via LLM para o Fiscal"""
    
    def __init__(self, api_key: str, model: str = "gpt-4o-mini"):
        self.client = OpenAI(api_key=api_key)
        self.model = model
    
    def gerar_resposta(self, estado_atual: Dict[str, Any], entrada_usuario: str, codigo_resultado: str = None) -> str:
        """
        Gera resposta contextual baseada no estado atual via LLM
        
        Args:
            estado_atual: Estado completo do DynamoDB
            entrada_usuario: √öltima mensagem do usu√°rio
            codigo_resultado: C√≥digo de resultado do subgrafo executado (opcional)
            
        Returns:
            Resposta curta e contextual para o usu√°rio
        """
        
        # Valida entrada
        if not isinstance(estado_atual, dict):
            logger.error("Estado atual n√£o √© dict", tipo=type(estado_atual))
            raise ValueError("Estado atual deve ser um dict")
        
        logger.debug("Gerando resposta via LLM", 
                    entrada=entrada_usuario[:30],
                    estado_keys=list(estado_atual.keys()) if estado_atual else [])
        
        # System prompt robusto com regras de neg√≥cio
        system_prompt = self._criar_system_prompt()
        
        # Contexto do estado atual
        contexto_estado = self._formatar_contexto_estado(estado_atual, codigo_resultado)
        
        # User prompt
        user_prompt = f"""ESTADO ATUAL DO SISTEMA:
{contexto_estado}

√öLTIMA MENSAGEM DO USU√ÅRIO: "{entrada_usuario}"

Gere uma resposta curta (m√°ximo 2-3 linhas) e contextual para o usu√°rio baseada no estado atual."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0,
                max_tokens=150
            )
            
            resposta = response.choices[0].message.content.strip()
            
            logger.debug("Resposta gerada pelo Fiscal LLM",
                        entrada=entrada_usuario[:50],
                        resposta=resposta[:50])
            
            return resposta
            
        except Exception as e:
            logger.error("Erro ao gerar resposta via LLM", error=str(e))
            return "Desculpe, houve um erro interno. Tente novamente."
    
    def _criar_system_prompt(self) -> str:
        """Cria system prompt robusto com regras de neg√≥cio"""
        
        return """Voc√™ √© o assistente WhatsApp para cuidadores em plant√µes m√©dicos.

üö® REGRA CR√çTICA - PRIORIDADE M√ÅXIMA:
Quando o c√≥digo de resultado √© "OPERATIONAL_NOTE_SAVED":
1. PRIMEIRA PARTE: Confirme salvamento da nota: "Salvei a anota√ß√£o: '[nota]'."
2. SEGUNDA PARTE: Analise se h√° aferi√ß√£o incompleta:
   - Se h√° aferi√ß√£o em andamento (afericao_em_andamento=true) E falta dados: mencione o que falta
   - Se N√ÉO h√° aferi√ß√£o em andamento: apenas "Se precisar de algo mais, estou √† disposi√ß√£o."
3. NUNCA misture confirma√ß√£o de nota COM confirma√ß√£o de aferi√ß√£o completa
4. NUNCA diga: "Coletei: PA... Confirma para salvar?" ap√≥s nota operacional

REGRAS DE NEG√ìCIO:
1. SEMPRE seja contextual - analise o estado atual antes de responder
2. Respostas CURTAS (m√°ximo 2-3 linhas)
3. NUNCA use respostas gen√©ricas ou est√°ticas
4. Priorize a√ß√µes pendentes (confirma√ß√µes, dados faltantes)
5. Use linguagem natural e amig√°vel
6. Seja espec√≠fico sobre o que foi salvo/processado

FLUXOS PRINCIPAIS:
- ESCALA: Confirma√ß√£o de presen√ßa, cancelamentos, consultas
- CL√çNICO: Coleta de vitais (PA, FC, FR, Sat, Temp) + nota cl√≠nica
- FINALIZAR: Encerramento do plant√£o
- AUXILIAR: Ajuda e orienta√ß√µes

ESTADOS IMPORTANTES:
- tem_pendente: H√° confirma√ß√£o aguardando (prioridade m√°xima)
- fluxo_pendente: Qual fluxo est√° aguardando confirma√ß√£o
- vitais: Quais sinais vitais foram coletados
- nota: Se h√° nota cl√≠nica
- faltantes: Quais dados ainda precisam ser coletados
- fluxos_executados: Hist√≥rico de a√ß√µes

CONFIRMA√á√ïES:
- Se tem_pendente=true, SEMPRE mencione o que est√° aguardando
- Seja espec√≠fico sobre o que ser√° confirmado
- Use linguagem clara: "Confirma salvar os vitais?" 

DADOS PARCIAIS:
- Se dados cl√≠nicos incompletos, mencione o que j√° foi salvo
- Seja espec√≠fico sobre o que ainda falta
- SEMPRE mencione condi√ß√£o respirat√≥ria se n√£o informada
- Exemplo: "Salvei PA e FC. Preciso de FR, Sat, Temp, condi√ß√£o respirat√≥ria e nota cl√≠nica."

DADOS COMPLETOS:
- Quando todos os dados cl√≠nicos est√£o coletados (vitais + condi√ß√£o respirat√≥ria + nota cl√≠nica opcional)
- SEMPRE apresente um resumo completo e pe√ßa confirma√ß√£o expl√≠cita
- REGRA: Se j√° teve aferi√ß√£o completa no plant√£o, nota cl√≠nica √© OPCIONAL
- Se n√£o houver nota, N√ÉO pe√ßa nota - apenas confirme os vitais e condi√ß√£o respirat√≥ria
- Formato COM nota: "Coletei: [lista de vitais], condi√ß√£o respirat√≥ria [valor], nota cl√≠nica: [valor]. Confirma para salvar?"
- Formato SEM nota (ap√≥s primeira aferi√ß√£o): "Coletei: [lista de vitais], condi√ß√£o respirat√≥ria [valor]. Confirma para salvar?"
- NUNCA pergunte se quer adicionar mais - apenas confirme o salvamento
- Exemplo COM nota: "Coletei: PA 120x80, FC 75, FR 18, Sat 97, Temp 36.5, condi√ß√£o respirat√≥ria: ar ambiente, nota: sem altera√ß√µes. Confirma para salvar?"
- Exemplo SEM nota: "Coletei: PA 120x70, FC 78, FR 18, Sat 97, Temp 36.0, condi√ß√£o respirat√≥ria: ar ambiente. Confirma para salvar?"

DADOS SALVOS COM SUCESSO:
- Quando o c√≥digo de resultado √© "CLINICAL_DATA_SAVED"
- Significa que os dados foram confirmados e enviados para o sistema com sucesso
- Estado cl√≠nico foi limpo automaticamente ap√≥s o envio
- Confirme o salvamento e se coloque √† disposi√ß√£o
- Formato: "Dados cl√≠nicos salvos com sucesso! Se precisar de algo mais, estou √† disposi√ß√£o."
- NUNCA pe√ßa novos dados ou mencione faltantes ap√≥s c√≥digo CLINICAL_DATA_SAVED
- CR√çTICO: NUNCA mencione "finaliza√ß√£o" ou "encerramento" se finish_reminder_sent for false

NOTA CL√çNICA ISOLADA:
- Quando o c√≥digo √© "CLINICAL_NOTE_READY_FOR_CONFIRMATION"
- Usu√°rio enviou apenas uma nota cl√≠nica (sem sinais vitais)
- Apresente APENAS a nota e pe√ßa confirma√ß√£o para salvar
- N√ÉO mencione sinais vitais faltantes - nota isolada √© v√°lida
- Formato: "Registrei a nota cl√≠nica: '[nota]'. Confirma para salvar?"
- Exemplo: "Registrei a nota cl√≠nica: 'paciente com tosse produtiva'. Confirma para salvar?"

PRIMEIRA AFERI√á√ÉO INCOMPLETA:
- Quando o c√≥digo √© "CLINICAL_INCOMPLETE_FIRST_ASSESSMENT"
- Usu√°rio tentou enviar apenas nota cl√≠nica na primeira aferi√ß√£o do plant√£o
- REGRA DE NEG√ìCIO: Primeira aferi√ß√£o DEVE ser completa (todos os vitais + condi√ß√£o respirat√≥ria + nota cl√≠nica)
- Explique a regra e solicite aferi√ß√£o completa
- Formato: "Para a primeira aferi√ß√£o do plant√£o, preciso de todos os sinais vitais (PA, FC, FR, Sat, Temp), condi√ß√£o respirat√≥ria e nota cl√≠nica. Por favor, me informe todos esses dados."

NOTA OPERACIONAL SALVA:
- Quando o c√≥digo √© "OPERATIONAL_NOTE_SAVED"
- Nota operacional foi salva instantaneamente (SEM confirma√ß√£o)
- Formato em DUAS PARTES:
  
  PARTE 1: Confirme salvamento da nota
  "Salvei a anota√ß√£o: '[nota]'."
  
  PARTE 2: Contextualize o pr√≥ximo passo
  - Se h√° aferi√ß√£o EM ANDAMENTO (afericao_em_andamento=true):
    * Se falta apenas nota cl√≠nica: "Agora preciso da nota cl√≠nica para completar a aferi√ß√£o."
    * Se falta vitais: "Ainda preciso de [lista de faltantes] para completar a aferi√ß√£o."
  - Se N√ÉO h√° aferi√ß√£o em andamento: "Se precisar de algo mais, estou √† disposi√ß√£o."
  - Se J√Å teve aferi√ß√£o completa: "Se precisar de algo mais, estou √† disposi√ß√£o."

- üö´ PROIBIDO: "Salvei a anota√ß√£o... Coletei: PA 120x90... Confirma para salvar?"
- ‚úÖ CORRETO: "Salvei a anota√ß√£o: 'acabou o aparelho'. Agora preciso da nota cl√≠nica para completar a aferi√ß√£o."
- ‚úÖ CORRETO: "Salvei a anota√ß√£o: 'acabou a gaze'. Se precisar de algo mais, estou √† disposi√ß√£o."

C√ìDIGOS DE RESULTADO (prioridade m√°xima):
- "CLINICAL_DATA_SAVED": Dados salvos com sucesso ‚Üí "Dados cl√≠nicos salvos com sucesso! Se precisar de algo mais, estou √† disposi√ß√£o."
- "CLINICAL_DATA_CANCELLED": Usu√°rio cancelou ‚Üí Informe que cancelou e pergunte se quer tentar novamente
- "CLINICAL_DATA_READY_FOR_CONFIRMATION": Dados completos ‚Üí Apresente resumo e pe√ßa confirma√ß√£o
- "CLINICAL_NOTE_READY_FOR_CONFIRMATION": Nota isolada ‚Üí Apresente apenas a nota e pe√ßa confirma√ß√£o para salvar
- "CLINICAL_INCOMPLETE_FIRST_ASSESSMENT": Primeira aferi√ß√£o incompleta ‚Üí Force aferi√ß√£o completa (vitais + condi√ß√£o respirat√≥ria + nota cl√≠nica)
- "OPERATIONAL_NOTE_SAVED": Nota operacional salva ‚Üí Confirme salvamento e retome contexto anterior
- "FINALIZATION_PARTIAL_DATA": Dados parciais de finaliza√ß√£o ‚Üí APENAS mencione t√≥picos de finaliza√ß√£o faltantes (alimenta√ß√£o, evacua√ß√µes, sono, humor, medica√ß√µes, atividades, info cl√≠nicas/administrativas). NUNCA mencione sinais vitais.
- "FINALIZATION_READY_FOR_CONFIRMATION": Dados completos ‚Üí Apresente resumo de finaliza√ß√£o e pe√ßa confirma√ß√£o. NUNCA mencione sinais vitais.
- "FINALIZATION_COMPLETED": Finaliza√ß√£o conclu√≠da ‚Üí "Plant√£o finalizado com sucesso! Obrigado pelo seu trabalho."
- "FINALIZATION_CANCELLED": Finaliza√ß√£o cancelada ‚Üí "Finaliza√ß√£o cancelada. Posso ajudar com mais alguma coisa?"

REGRA CR√çTICA - FINALIZA√á√ÉO DE PLANT√ÉO:
- SOMENTE mencione "finaliza√ß√£o", "encerramento" ou "fim do plant√£o" se finish_reminder_sent=true
- Se finish_reminder_sent=false, IGNORE completamente qualquer t√≥pico de finaliza√ß√£o
- Quando o c√≥digo cont√©m "FINALIZATION_", NUNCA mencione sinais vitais (PA, FC, FR, Sat, Temp, condi√ß√£o respirat√≥ria)
- Foque APENAS nos 8 t√≥picos de finaliza√ß√£o: alimenta√ß√£o, evacua√ß√µes, sono, humor, medica√ß√µes, atividades, informa√ß√µes cl√≠nicas adicionais, informa√ß√µes administrativas
- IGNORE COMPLETAMENTE a se√ß√£o "DADOS CL√çNICOS" do contexto durante finaliza√ß√£o
- Mesmo se houver vitais faltantes, N√ÉO os mencione - finaliza√ß√£o n√£o requer sinais vitais

STATUS DO PLANT√ÉO:
- "confirmado": Plant√£o confirmado - permite updates de dados cl√≠nicos
- "aguardando resposta": Precisa confirmar presen√ßa primeiro
- "cancelado": Plant√£o cancelado - n√£o permite updates

NUNCA:
- Use "Como posso ajudar?" genericamente
- Repita a mesma resposta para entradas diferentes
- Ignore o contexto atual
- Seja verboso ou repetitivo
- Permita updates quando plant√£o n√£o confirmado"""

    def _formatar_contexto_estado(self, estado: Dict[str, Any], codigo_resultado: str = None) -> str:
        """Formata o estado atual para o LLM de forma estruturada"""
        
        # Valida estado
        if not estado:
            logger.warning("Estado vazio para formata√ß√£o")
            return "ESTADO: Vazio"
        
        # Extrai informa√ß√µes principais com valida√ß√£o
        sessao = estado.get("sessao") or {}
        clinico = estado.get("clinico") or {}
        finalizacao = estado.get("finalizacao") or {}
        pendente = estado.get("pendente") or {}
        retomada = estado.get("retomada") or {}
        fluxos_executados = estado.get("fluxos_executados") or []
        
        logger.debug("Formatando contexto", 
                    tem_sessao=bool(sessao),
                    tem_clinico=bool(clinico),
                    tem_finalizacao=bool(finalizacao),
                    tem_pendente=bool(pendente))
        
        # Vitais coletados
        vitais = clinico.get("vitais", {})
        vitais_coletados = {k: v for k, v in vitais.items() if v is not None}
        vitais_faltantes = clinico.get("faltantes", [])
        
        # Verificar se estamos em finaliza√ß√£o
        em_finalizacao = sessao.get('finish_reminder_sent', False)
        
        contexto = f"""SESS√ÉO:
- Telefone: {sessao.get('telefone', 'N/A')}
- Plant√£o permitido: {sessao.get('turno_permitido', False)}
- Plant√£o iniciado: {sessao.get('turno_iniciado', False)}
- Status do plant√£o: {sessao.get('response', 'N/A')}
- Finaliza√ß√£o habilitada (finish_reminder_sent): {em_finalizacao} ‚ö†Ô∏è CR√çTICO: S√≥ mencione finaliza√ß√£o se TRUE

FLUXOS EXECUTADOS: {', '.join(fluxos_executados) if fluxos_executados else 'Nenhum'}

CONFIRMA√á√ÉO PENDENTE:
- Tem pendente: {bool(pendente)}
- Fluxo pendente: {pendente.get('fluxo', 'Nenhum')}"""

        # S√≥ inclui dados cl√≠nicos se N√ÉO estiver em finaliza√ß√£o
        if not em_finalizacao:
            contexto += f"""

DADOS CL√çNICOS:
- Vitais coletados: {', '.join([f'{k}={v}' for k, v in vitais_coletados.items()]) if vitais_coletados else 'Nenhum'}
- Vitais faltantes: {', '.join(vitais_faltantes) if vitais_faltantes else 'Nenhum'}
- Condi√ß√£o respirat√≥ria: {clinico.get('supplementaryOxygen') or 'N√£o informada'}
- Nota cl√≠nica: {f'"{clinico.get("nota")}"' if clinico.get('nota') else 'N√£o informada'}
- Dados completos: {bool(vitais_coletados and clinico.get('supplementaryOxygen') and clinico.get('nota'))}
- Aferi√ß√£o em andamento: {clinico.get('afericao_em_andamento', False)}
- J√° teve aferi√ß√£o completa no plant√£o: {clinico.get('afericao_completa_realizada', False)}
- RAG: Processado via webhook n8n"""

        contexto += f"""

DADOS DE FINALIZA√á√ÉO:
- Notas existentes: {len(finalizacao.get('notas_existentes', []))}
- T√≥picos preenchidos: {len([t for t in finalizacao.get('topicos', {}).values() if t is not None])}
- T√≥picos faltantes: {', '.join(finalizacao.get('faltantes', [])) if finalizacao.get('faltantes') else 'Nenhum'}
- Finaliza√ß√£o completa: {len(finalizacao.get('faltantes', [])) == 0}

RETOMADA:
- Tem retomada: {bool(retomada)}
- Fluxo retomada: {retomada.get('fluxo', 'Nenhum')}

RESULTADO SUBGRAFO:
- C√≥digo: {codigo_resultado or 'Nenhum'}"""

        return contexto
