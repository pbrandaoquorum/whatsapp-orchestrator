"""
Two-Phase Commit helper para confirma√ß√£o antes de executar a√ß√µes cr√≠ticas
Agora usando DynamoDB como persist√™ncia
"""
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from app.infra.timeutils import agora_br
from app.infra.store import PendingActionsStore, PendingAction, SessionStore
from app.infra.logging import obter_logger

logger = obter_logger(__name__)

# Inst√¢ncias globais dos stores
_actions_store: Optional[PendingActionsStore] = None
_session_store: Optional[SessionStore] = None


def get_actions_store() -> PendingActionsStore:
    """Retorna inst√¢ncia singleton do PendingActionsStore"""
    global _actions_store
    if _actions_store is None:
        _actions_store = PendingActionsStore()
    return _actions_store


def get_session_store() -> SessionStore:
    """Retorna inst√¢ncia singleton do SessionStore"""
    global _session_store
    if _session_store is None:
        _session_store = SessionStore()
    return _session_store


def criar_acao_pendente(
    session_id: str,
    fluxo_destino: str,
    payload: Dict[str, Any],
    descricao: str,
    duracao_minutos: int = 10
) -> Dict[str, Any]:
    """
    Cria uma a√ß√£o pendente para two-phase commit e persiste no DynamoDB
    
    Args:
        session_id: ID da sess√£o
        fluxo_destino: Nome do fluxo que executar√° a a√ß√£o ap√≥s confirma√ß√£o
        payload: Dados necess√°rios para executar a a√ß√£o
        descricao: Descri√ß√£o da a√ß√£o para o usu√°rio
        duracao_minutos: Tempo limite para confirma√ß√£o
    
    Returns:
        Dict com dados da a√ß√£o pendente (formato compat√≠vel)
    """
    expires_at = int((datetime.utcnow() + timedelta(minutes=duracao_minutos)).timestamp())
    
    # Criar a√ß√£o no DynamoDB
    actions_store = get_actions_store()
    action = actions_store.create(
        session_id=session_id,
        flow=fluxo_destino,
        description=descricao,
        payload=payload,
        expires_at=expires_at
    )
    
    # Atualizar sess√£o com ID da a√ß√£o pendente
    session_store = get_session_store()
    session_store.update_metadata(
        session_id=session_id,
        pendingActionId=action.action_id,
        lastQuestion=descricao,
        flowWhoAsked=fluxo_destino
    )
    
    logger.info("A√ß√£o pendente criada", session_id=session_id, action_id=action.action_id, flow=fluxo_destino)
    
    # Retornar formato compat√≠vel com c√≥digo existente
    return {
        "action_id": action.action_id,
        "fluxo_destino": fluxo_destino,
        "payload": payload,
        "descricao": descricao,
        "criado_em": action.created_at,
        "expira_em": datetime.fromtimestamp(expires_at).isoformat(),
        "confirmado": False,
        "executado": False,
        "cancelado": False,
        "status": action.status
    }


def acao_expirou(acao_pendente: Dict[str, Any]) -> bool:
    """Verifica se a a√ß√£o pendente expirou"""
    if not acao_pendente or not acao_pendente.get("expira_em"):
        return True
    
    try:
        expira_em = datetime.fromisoformat(acao_pendente["expira_em"])
        return datetime.utcnow() > expira_em
    except (ValueError, TypeError):
        return True


def acao_pode_ser_executada(acao_pendente: Dict[str, Any]) -> bool:
    """Verifica se a a√ß√£o pode ser executada"""
    if not acao_pendente:
        return False
    
    # Verificar status do DynamoDB se dispon√≠vel
    if "status" in acao_pendente:
        return acao_pendente["status"] == "confirmed" and not acao_expirou(acao_pendente)
    
    # Fallback para formato antigo
    return (
        acao_pendente.get("confirmado", False) and
        not acao_pendente.get("executado", False) and
        not acao_pendente.get("cancelado", False) and
        not acao_expirou(acao_pendente)
    )


def marcar_acao_confirmada(session_id: str, acao_pendente: Dict[str, Any]) -> Dict[str, Any]:
    """Marca a a√ß√£o como confirmada pelo usu√°rio no DynamoDB"""
    action_id = acao_pendente.get("action_id")
    if not action_id:
        logger.error("A√ß√£o sem action_id para confirma√ß√£o", session_id=session_id)
        return acao_pendente
    
    actions_store = get_actions_store()
    success = actions_store.mark_confirmed(session_id, action_id)
    
    if success:
        acao_pendente["confirmado"] = True
        acao_pendente["confirmado_em"] = agora_br().isoformat()
        acao_pendente["status"] = "confirmed"
        logger.info("A√ß√£o confirmada", session_id=session_id, action_id=action_id)
    else:
        logger.warning("Falha ao confirmar a√ß√£o", session_id=session_id, action_id=action_id)
    
    return acao_pendente


def marcar_acao_executada(session_id: str, acao_pendente: Dict[str, Any]) -> Dict[str, Any]:
    """Marca a a√ß√£o como executada no DynamoDB"""
    action_id = acao_pendente.get("action_id")
    if not action_id:
        logger.error("A√ß√£o sem action_id para execu√ß√£o", session_id=session_id)
        return acao_pendente
    
    actions_store = get_actions_store()
    success = actions_store.mark_executed(session_id, action_id)
    
    if success:
        acao_pendente["executado"] = True
        acao_pendente["executado_em"] = agora_br().isoformat()
        acao_pendente["status"] = "executed"
        logger.info("A√ß√£o executada", session_id=session_id, action_id=action_id)
        
        # Limpar a√ß√£o pendente da sess√£o
        session_store = get_session_store()
        session_store.update_metadata(
            session_id=session_id,
            pendingActionId=None,
            lastQuestion=None,
            flowWhoAsked=None
        )
    else:
        logger.warning("Falha ao executar a√ß√£o", session_id=session_id, action_id=action_id)
    
    return acao_pendente


def marcar_acao_cancelada(session_id: str, acao_pendente: Dict[str, Any]) -> Dict[str, Any]:
    """Marca a a√ß√£o como cancelada no DynamoDB"""
    action_id = acao_pendente.get("action_id")
    if not action_id:
        logger.error("A√ß√£o sem action_id para cancelamento", session_id=session_id)
        return acao_pendente
    
    actions_store = get_actions_store()
    success = actions_store.abort(session_id, action_id)
    
    if success:
        acao_pendente["cancelado"] = True
        acao_pendente["cancelado_em"] = agora_br().isoformat()
        acao_pendente["status"] = "aborted"
        logger.info("A√ß√£o cancelada", session_id=session_id, action_id=action_id)
        
        # Limpar a√ß√£o pendente da sess√£o
        session_store = get_session_store()
        session_store.update_metadata(
            session_id=session_id,
            pendingActionId=None,
            lastQuestion=None,
            flowWhoAsked=None
        )
    else:
        logger.warning("Falha ao cancelar a√ß√£o", session_id=session_id, action_id=action_id)
    
    return acao_pendente


def obter_acao_pendente_atual(session_id: str) -> Optional[Dict[str, Any]]:
    """Obt√©m a a√ß√£o pendente atual da sess√£o do DynamoDB"""
    actions_store = get_actions_store()
    action = actions_store.get_current(session_id)
    
    if not action:
        return None
    
    # Converter para formato compat√≠vel
    expires_at = datetime.fromtimestamp(action.expires_at) if action.expires_at else datetime.utcnow()
    
    return {
        "action_id": action.action_id,
        "fluxo_destino": action.flow,
        "payload": action.payload,
        "descricao": action.description,
        "criado_em": action.created_at,
        "expira_em": expires_at.isoformat(),
        "confirmado": action.status in ["confirmed", "executed"],
        "executado": action.status == "executed",
        "cancelado": action.status == "aborted",
        "status": action.status
    }


def gerar_mensagem_confirmacao(acao_pendente: Dict[str, Any]) -> str:
    """Gera mensagem de confirma√ß√£o para o usu√°rio"""
    descricao = acao_pendente.get("descricao", "Executar a√ß√£o")
    
    return f"""
üîî *Confirma√ß√£o Necess√°ria*

{descricao}

Confirma esta a√ß√£o? Digite *sim* para confirmar ou *n√£o* para cancelar.

‚è∞ Esta confirma√ß√£o expira em alguns minutos.
""".strip()


def gerar_mensagem_cancelamento() -> str:
    """Gera mensagem quando a√ß√£o √© cancelada"""
    return "‚ùå A√ß√£o cancelada. Como posso ajudar?"


def gerar_mensagem_expirada() -> str:
    """Gera mensagem quando a√ß√£o expira"""
    return "‚è∞ Tempo esgotado para confirma√ß√£o. A a√ß√£o foi cancelada automaticamente."


def limpar_acao_pendente(session_id: str) -> Optional[Dict[str, Any]]:
    """Limpa a√ß√£o pendente da sess√£o e retorna None"""
    session_store = get_session_store()
    session_store.update_metadata(
        session_id=session_id,
        pendingActionId=None,
        lastQuestion=None,
        flowWhoAsked=None
    )
    
    logger.debug("A√ß√£o pendente limpa da sess√£o", session_id=session_id)
    return None


# Templates para diferentes tipos de a√ß√£o
TEMPLATES_CONFIRMACAO = {
    "confirmar_presenca": "Confirmar presen√ßa no plant√£o de {data} √†s {horario} para o paciente {paciente}?",
    "cancelar_presenca": "Cancelar presen√ßa no plant√£o de {data} √†s {horario} para o paciente {paciente}?",
    "salvar_sinais_vitais": "Salvar os seguintes sinais vitais?\n\n{sinais_vitais}",
    "salvar_nota_clinica": "Salvar nota cl√≠nica e sintomas identificados?",
    "finalizar_plantao": "Finalizar o plant√£o e enviar relat√≥rio final?",
}


def criar_confirmacao_presenca(acao: str, dados_plantao: Dict[str, Any]) -> Dict[str, Any]:
    """Cria confirma√ß√£o espec√≠fica para presen√ßa"""
    template_key = f"{acao}_presenca"
    template = TEMPLATES_CONFIRMACAO.get(template_key, "Confirmar a√ß√£o de presen√ßa?")
    
    descricao = template.format(
        data=dados_plantao.get("data", "data n√£o informada"),
        horario=dados_plantao.get("horario", "hor√°rio n√£o informado"),
        paciente=dados_plantao.get("nome_paciente", "paciente n√£o identificado")
    )
    
    payload = {
        "scheduleIdentifier": dados_plantao.get("schedule_id"),
        "responseValue": "confirmado" if acao == "confirmar" else "cancelado"
    }
    
    return criar_acao_pendente(
        fluxo_destino="escala_commit",
        payload=payload,
        descricao=descricao
    )


def criar_confirmacao_sinais_vitais(dados_vitais: Dict[str, Any]) -> Dict[str, Any]:
    """Cria confirma√ß√£o espec√≠fica para sinais vitais"""
    from app.graph.clinical_extractor import gerar_resumo_sinais_vitais
    
    resumo = gerar_resumo_sinais_vitais(dados_vitais)
    descricao = TEMPLATES_CONFIRMACAO["salvar_sinais_vitais"].format(sinais_vitais=resumo)
    
    return criar_acao_pendente(
        fluxo_destino="clinical_commit",
        payload={"vitais": dados_vitais},
        descricao=descricao
    )


def criar_confirmacao_nota_clinica(texto_nota: str, sintomas: list) -> Dict[str, Any]:
    """Cria confirma√ß√£o espec√≠fica para nota cl√≠nica"""
    descricao = TEMPLATES_CONFIRMACAO["salvar_nota_clinica"]
    
    payload = {
        "nota": texto_nota,
        "sintomas": sintomas
    }
    
    return criar_acao_pendente(
        fluxo_destino="notas_commit",
        payload=payload,
        descricao=descricao
    )


def criar_confirmacao_finalizacao(dados_relatorio: Dict[str, Any]) -> Dict[str, Any]:
    """Cria confirma√ß√£o espec√≠fica para finaliza√ß√£o"""
    descricao = TEMPLATES_CONFIRMACAO["finalizar_plantao"]
    
    return criar_acao_pendente(
        fluxo_destino="finalizar_commit",
        payload=dados_relatorio,
        descricao=descricao
    )
