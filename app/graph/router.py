"""
Router principal - Roteamento determin√≠stico + LLM leve
Implementa toda a l√≥gica de gates e despacho
"""
from typing import Dict, Any
import structlog

from app.graph.state import GraphState
from app.llm.classifiers import IntentClassifier, OperationalNoteClassifier
from app.infra.http import LambdaHttpClient

logger = structlog.get_logger(__name__)


class MainRouter:
    """Router principal do sistema"""
    
    def __init__(self, 
                 intent_classifier: IntentClassifier,
                 operational_classifier: OperationalNoteClassifier,
                 http_client: LambdaHttpClient,
                 lambda_get_schedule_url: str):
        self.intent_classifier = intent_classifier
        self.operational_classifier = operational_classifier
        self.http_client = http_client
        self.lambda_get_schedule_url = lambda_get_schedule_url
        logger.info("MainRouter inicializado")
    
    def _verificar_dados_sessao(self, state: GraphState) -> bool:
        """Verifica se os dados b√°sicos da sess√£o est√£o presentes"""
        sessao = state.sessao
        return bool(
            sessao.get("schedule_id") and 
            sessao.get("report_id") and 
            sessao.get("patient_id") and
            sessao.get("caregiver_id")
        )
    
    def _plantao_confirmado(self, state: GraphState) -> bool:
        """Verifica se o plant√£o est√° confirmado para permitir updates de dados"""
        response = state.sessao.get("response", "").lower()
        return response == "confirmado"
    
    def _verificar_flag_finalizacao(self, state: GraphState) -> bool:
        """
        Verifica se a flag de finaliza√ß√£o est√° atualizada
        
        Para plant√µes confirmados, sempre atualiza se finish_reminder_sent for False
        pois pode estar desatualizada em rela√ß√£o ao backend
        """
        sessao = state.sessao
        
        # Se plant√£o n√£o est√° confirmado, n√£o precisa verificar finaliza√ß√£o
        if not self._plantao_confirmado(state):
            return True
        
        # Para plant√µes confirmados, se finish_reminder_sent for False, pode estar desatualizada
        # Ent√£o for√ßamos atualiza√ß√£o para pegar o valor correto do backend
        finish_reminder = sessao.get("finish_reminder_sent", False)
        
        # Se for False, pode estar desatualizada - for√ßa atualiza√ß√£o
        return finish_reminder is True
    
    def _chamar_get_schedule_started(self, state: GraphState) -> None:
        """Chama getScheduleStarted e preenche dados da sess√£o"""
        telefone = state.sessao.get("telefone")
        if not telefone:
            logger.error("Telefone n√£o encontrado na sess√£o")
            raise Exception("Telefone √© obrigat√≥rio para buscar dados da sess√£o")
        
        logger.info("Chamando getScheduleStarted", telefone=telefone)
        
        try:
            result = self.http_client.get_schedule_started(
                self.lambda_get_schedule_url, 
                telefone
            )
            
            # Preenche dados da sess√£o
            response_status = result.get("response", "").lower()
            shift_allow = result.get("shiftAllow", True)
            
            # L√≥gica correta: s√≥ permite se shiftAllow=true E response="confirmado"
            turno_realmente_permitido = shift_allow and response_status == "confirmado"
            
            state.sessao.update({
                "schedule_id": result.get("scheduleID"),
                "report_id": result.get("reportID"),
                "patient_id": result.get("patientID"),
                "caregiver_id": result.get("caregiverID"),
                "data_relatorio": result.get("reportDate"),
                "response": result.get("response"),  # Status do plant√£o
                "shift_allow": shift_allow,  # True/False do backend
                "finish_reminder_sent": result.get("finishReminderSent", False),  # Flag para finaliza√ß√£o
                "empresa": result.get("company"),
                "cooperativa": result.get("cooperative")
            })
            
            # Debug: mostrar dados extra√≠dos
            logger.info("Dados extra√≠dos do getScheduleStarted",
                       schedule_id=state.sessao.get("schedule_id"),
                       report_id=state.sessao.get("report_id"),
                       patient_id=state.sessao.get("patient_id"),
                       caregiver_id=state.sessao.get("caregiver_id"),
                       shift_allow=shift_allow,
                       response_status=response_status,
                       empresa=state.sessao.get("empresa"))
            
            logger.info("L√≥gica de permiss√£o aplicada",
                       shift_allow_original=shift_allow,
                       response=response_status,
                       plantao_confirmado=self._plantao_confirmado(state),
                       formula="shiftAllow AND response=='confirmado'")
            
        except Exception as e:
            logger.error("Erro ao chamar getScheduleStarted", telefone=telefone, error=str(e))
            # Em caso de erro, marca como n√£o permitido para for√ßar fluxo auxiliar
            state.sessao["turno_permitido"] = False
            state.sessao["cancelado"] = True
            raise
    
    def _classificar_intencao(self, state: GraphState) -> str:
        """Classifica inten√ß√£o usando LLM"""
        texto_usuario = state.entrada.get("texto_usuario", "")
        
        if not texto_usuario:
            logger.warning("Texto do usu√°rio vazio, usando inten√ß√£o auxiliar")
            return "auxiliar"
        
        intencao = self.intent_classifier.classificar_intencao(texto_usuario)
        state.roteador["intencao"] = intencao
        
        logger.info("Inten√ß√£o classificada", 
                   texto=texto_usuario[:50],
                   intencao=intencao)
        
        return intencao
    
    def _aplicar_gates_deterministicos(self, state: GraphState, intencao: str) -> str:
        """
        Aplica gates determin√≠sticos AP√ìS classifica√ß√£o
        Pode modificar a inten√ß√£o baseado no estado
        """
        sessao = state.sessao
        
        # Gate 1: Se plant√£o cancelado -> auxiliar  
        if sessao.get("response") == "cancelado":
            logger.info("Plant√£o cancelado, redirecionando para auxiliar")
            return "auxiliar"
        
        # Gate 2: Se turno n√£o permitido por falta de plant√£o -> auxiliar
        if not sessao.get("shift_allow", True):
            logger.info("Plant√£o n√£o existe (shiftAllow=false), redirecionando para auxiliar")
            return "auxiliar"
        
        # Gate 3: Se plant√£o n√£o confirmado -> sempre escala (para confirma√ß√£o ou cl√≠nico)
        if not self._plantao_confirmado(state):
            response = sessao.get("response", "N/A")
            if intencao == "clinico":
                logger.info("Plant√£o n√£o confirmado, redirecionando cl√≠nico para escala",
                           response=response)
            else:
                logger.info("Plant√£o n√£o confirmado, direcionando para escala",
                           intencao_original=intencao, response=response)
            return "escala"
        
        # Gate 4: REMOVIDO - Finaliza√ß√£o agora tem prioridade m√°xima no router principal
        
        # Gate 5: REMOVIDO - Finaliza√ß√£o n√£o requer vitais completos
        # O novo fluxo de finaliza√ß√£o coleta t√≥picos espec√≠ficos, n√£o vitais
        # Vitais s√£o opcionais para finaliza√ß√£o
        
        # Se chegou at√© aqui, mant√©m inten√ß√£o original
        return intencao
    
    def _preservar_dados_clinicos_se_necessario(self, state: GraphState) -> None:
        """
        üß† L√ìGICA INTELIGENTE: Preserva dados cl√≠nicos quando h√° confirma√ß√£o pendente
        Independente de qual fluxo est√° pendente, sempre tenta extrair dados cl√≠nicos
        """
        try:
            texto_usuario = state.entrada.get("texto_usuario", "")
            if not texto_usuario:
                return
            
            # üß† PRESERVA SEMPRE que h√° dados cl√≠nicos, independente de pendente
            # Isso garante que dados n√£o sejam perdidos em qualquer situa√ß√£o
            
            # Preserva√ß√£o silenciosa de dados cl√≠nicos
            
            # Import din√¢mico para evitar depend√™ncias circulares
            # Extra√ß√£o cl√≠nica consolidada no ClinicalExtractor
            from app.llm.extractors import ClinicalExtractor
            import os
            
            # Criar extrator
            api_key = os.getenv("OPENAI_API_KEY")
            if not api_key:
                return
            
            extractor = ClinicalExtractor(
                api_key=api_key,
                model=os.getenv("EXTRACTOR_MODEL", "gpt-4o-mini")
            )
            
            # Extrair dados cl√≠nicos
            resultado_extracao = extractor.extrair_clinico_completo(texto_usuario)
            
            # Verificar se encontrou dados relevantes
            vitais_encontrados = {}
            for campo, valor in resultado_extracao.get("vitais", {}).items():
                if valor is not None:
                    vitais_encontrados[campo] = valor
            
            nota_encontrada = resultado_extracao.get("nota")
            
            if not vitais_encontrados and not nota_encontrada:
                return  # Nada para preservar
            
            # Preservar no estado (mesclar com existentes)
            clinico_atual = state.clinico
            
            # Mesclar vitais (novos sobrescrevem antigos)
            for campo, valor in vitais_encontrados.items():
                clinico_atual["vitais"][campo] = valor
            
            # Atualizar nota se encontrada
            if nota_encontrada:
                clinico_atual["nota"] = nota_encontrada
            
            # Atualizar lista de faltantes
            campos_obrigatorios = ["PA", "FC", "FR", "Sat", "Temp"]
            faltantes = [
                campo for campo in campos_obrigatorios 
                if not clinico_atual["vitais"].get(campo)
            ]
            clinico_atual["faltantes"] = faltantes
            
            # Dados preservados silenciosamente
            
        except Exception as e:
            logger.error("Erro ao preservar dados cl√≠nicos no router", error=str(e))
    
    def _verificar_nota_operacional(self, state: GraphState) -> bool:
        """
        Verifica se o texto cont√©m uma nota operacional que deve ser enviada instantaneamente
        """
        try:
            texto_usuario = state.entrada.get("texto_usuario", "")
            if not texto_usuario:
                return False
            
            is_operational, operational_note = self.operational_classifier.is_operational_note(texto_usuario)
            
            if is_operational and operational_note:
                # Armazena a nota operacional no estado para processamento
                state.operacional = {
                    "nota": operational_note,
                    "timestamp": state.entrada.get("timestamp"),
                    "tipo": "instantanea"
                }
                
                logger.info("Nota operacional detectada", 
                           nota=operational_note[:100],
                           session_id=state.sessao.get("session_id"))
                return True
                
            return False
            
        except Exception as e:
            logger.error("Erro ao verificar nota operacional", error=str(e))
            return False
    
    def rotear(self, state: GraphState) -> str:
        """
        Executa roteamento completo
        
        Returns:
            Nome do pr√≥ximo subgrafo a executar
        """
        logger.info("Iniciando roteamento", 
                   session_id=state.sessao.get("session_id"),
                   tem_retomada=state.tem_retomada())
        
        # 0. üß† L√ìGICA INTELIGENTE: Preserva dados cl√≠nicos ANTES de qualquer roteamento
        self._preservar_dados_clinicos_se_necessario(state)
        
        # 0.5. üö® NOTAS OPERACIONAIS: Verifica se h√° nota operacional para envio instant√¢neo
        nota_operacional = self._verificar_nota_operacional(state)
        if nota_operacional:
            return "operacional"  # Redireciona para subgrafo operacional
        
        # 1. Se h√° confirma√ß√£o pendente, vai direto para o subgrafo correto
        if state.tem_pendente():
            fluxo_pendente = state.pendente["fluxo"]
            logger.info("ROUTER: Confirma√ß√£o pendente detectada", 
                       fluxo=fluxo_pendente,
                       session_id=state.sessao.get("session_id"))
            return fluxo_pendente
        
        # 2. Se h√° retomada, pula classifica√ß√£o e despacha direto
        if state.tem_retomada():
            fluxo_retomada = state.retomada["fluxo"]
            motivo = state.retomada.get("motivo", "")
            logger.info("Retomada detectada", fluxo=fluxo_retomada, motivo=motivo)
            
            # Limpa retomada ap√≥s usar
            state.retomada = None
            return fluxo_retomada
        
        # 3. Verifica se precisa buscar dados da sess√£o
        if not self._verificar_dados_sessao(state):
            logger.info("Dados da sess√£o faltando, chamando getScheduleStarted")
            self._chamar_get_schedule_started(state)
        
        # 3.1. Verifica se precisa atualizar flag de finaliza√ß√£o
        elif not self._verificar_flag_finalizacao(state):
            logger.info("Flag de finaliza√ß√£o desatualizada, atualizando via getScheduleStarted",
                       finish_reminder_atual=state.sessao.get("finish_reminder_sent"),
                       plantao_confirmado=self._plantao_confirmado(state))
            self._chamar_get_schedule_started(state)
        
        # 4. GATE DE FINALIZA√á√ÉO (prioridade m√°xima - antes da classifica√ß√£o LLM)
        if state.sessao.get("finish_reminder_sent", False):
            logger.info("Flag finishReminderSent=true detectada, for√ßando finaliza√ß√£o",
                       finish_reminder_sent=True)
            intencao_final = "finalizar"
        else:
            # 5. Classifica inten√ß√£o via LLM
            intencao = self._classificar_intencao(state)
            
            # 6. Aplica gates determin√≠sticos
            intencao_final = self._aplicar_gates_deterministicos(state, intencao)
        
        # 6. Log do resultado final
        if 'intencao' in locals() and intencao != intencao_final:
            logger.info("Inten√ß√£o modificada por gates",
                       intencao_original=intencao,
                       intencao_final=intencao_final)
        elif not 'intencao' in locals():
            logger.info("Finaliza√ß√£o for√ßada por finishReminderSent",
                       intencao_final=intencao_final)
        
        # 7. Atualiza estado
        state.roteador["intencao"] = intencao_final
        
        logger.info("Roteamento conclu√≠do",
                   session_id=state.sessao.get("session_id"),
                   intencao_final=intencao_final)
        
        return intencao_final
